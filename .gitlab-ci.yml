include:
  - template: 'Workflows/Branch-Pipelines.gitlab-ci.yml'

stages:
  - p4_sim
  - rtl_sim
  - ip
  - bitfile
  - validate
  - package
  - trigger_downstream

variables:
  GIT_STRATEGY: clone
  SEED: 0
  RANDOMIZE_SEED: 0
  BUILD_ID: $CI_PIPELINE_ID

.common:
  image: $CI_REGISTRY/ht/xilinx-tools-docker:77364-g0c199152
  before_script:
    - if [ $RANDOMIZE_SEED -gt 0 ]; then export SEED=$RANDOM; fi
    - echo "Running pipeline with SEED $SEED..."
  variables:
    XILINXD_LICENSE_FILE: "2100@dmv.es.net"
    # Required to keep click python module happy
    LC_ALL: C.UTF-8
    LANG: C.UTF-8
    GIT_SUBMODULE_STRATEGY: recursive

p4bm:
  stage: p4_sim
  extends: .common
  tags:
    - ht-sim
  script:
    - make -s -C src/vitisnetp4/p4/sim build sim-all
    - make -s -C examples/p4_only/p4/sim sim-all
    - make -s -C examples/p4_and_verilog/p4/sim build sim-all
    - make -s -C examples/p4_with_extern/p4/sim sim-all
    - make -s -C examples/p4_multi_proc/p4/sim_igr sim-all
    - make -s -C examples/p4_multi_proc/p4/sim_egr sim-all
    - make -s -C examples/proxy_test/p4/sim build sim-all
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - src/vitisnetp4/p4/sim
      - examples/p4_only/p4/sim
      - examples/p4_and_verilog/p4/sim
      - examples/p4_with_extern/p4/sim
      - examples/p4_multi_proc/p4/sim_igr
      - examples/p4_multi_proc/p4/sim_egr
      - examples/proxy_test/p4/sim
  needs: []

sim_p4_apps:
  stage: rtl_sim
  extends: .common
  tags:
    - ht-sim
  script:
    - make -s -C src/p4_proc/tests/regression
    - grep 'PASSED.*suites passing' src/p4_proc/tests/regression/run_$SEED/sim.log
    - make -s -C src/smartnic_app/tests/regression
    - grep 'PASSED.*suites passing' src/smartnic_app/tests/regression/run_$SEED/sim.log
    - make -s -C examples/p4_multi_proc config
    - make -s -C examples/p4_multi_proc/tests/regression
    - grep 'PASSED.*suites passing' examples/p4_multi_proc/tests/regression/run_$SEED/sim.log
    - make -s -C examples/p4_and_verilog/tests/regression
    - grep 'PASSED.*suites passing' examples/p4_and_verilog/tests/regression/run_$SEED/sim.log
    - make -s -C examples/proxy_test/tests/regression
    - grep 'PASSED.*suites passing' examples/proxy_test/tests/regression/run_$SEED/sim.log
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    reports:
      junit:
        - src/p4_proc/tests/regression/run_*/tests.xml
        - src/smartnic_app/tests/regression/run_*/tests.xml
        - examples/p4_multi_proc/tests/regression/run_*/tests.xml
        - examples/p4_and_verilog/tests/regression/run_*/tests.xml
        - examples/proxy_test/tests/regression/run_*/tests.xml
    when: always
  timeout: 4h
  needs: []

sim_platform:
  stage: rtl_sim
  extends: .common
  tags:
    - ht-sim
  script:
    - make -s -C src/smartnic/tests/top/regression
    - grep 'PASSED.*suites passing' src/smartnic/tests/top/regression/run_$SEED/sim.log
    - make -s -C src/smartnic/tests/block/regression
    - grep 'PASSED.*suites passing' src/smartnic/tests/block/regression/run_$SEED/sim.log
    - make -s -C src/smartnic_app/tests.smartnic/regression
    - grep 'PASSED.*suites passing' src/smartnic_app/tests.smartnic/regression/run_$SEED/sim.log
    - make -s -C examples/p2p/tests.smartnic/regression
    - grep 'PASSED.*suites passing' examples/p2p/tests.smartnic/regression/run_$SEED/sim.log
    - make -s -C src/smartnic_250mhz/tests/regression
    - grep 'PASSED.*suites passing' src/smartnic_250mhz/tests/regression/run_$SEED/sim.log
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    reports:
      junit:
        - src/smartnic/tests/top/regression/run_*/tests.xml
        - src/smartnic/tests/block/regression/run_*/tests.xml
        - src/smartnic_app/tests.smartnic/regression/run_*/tests.xml
        - examples/p2p/tests.smartnic/regression/run_*/tests.xml
        - src/smartnic_250mhz/tests/regression/run_*/tests.xml
    when: always
  timeout: 4h
  needs: []

ons_ip_cache_key:
  stage: ip
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git submodule status -- open-nic-shell | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      ONS_IP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.ons_ip:
  stage: ip
  extends: .common
  tags:
    - ht-synth
  script:
    - make -f makefile.esnet project_ip BOARD=$SN_HW_BOARD
  artifacts:
    paths:
      - open-nic-shell/build
  cache:
    - key: cache-ons_ip-$SN_HW_BOARD-$ONS_IP_CACHE_KEY
      paths:
        - open-nic-shell/build
  timeout: 4h
  needs:
    - ons_ip_cache_key

ons_ip_au280:
  extends: .ons_ip
  variables:
    SN_HW_BOARD: au280

ons_ip_au55c:
  extends: .ons_ip
  variables:
    SN_HW_BOARD: au55c

ons_ip_au250:
  extends: .ons_ip
  variables:
    SN_HW_BOARD: au250
  rules:
    - when: manual
      allow_failure: true

smartnic_ip_cache_key:
  stage: ip
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git submodule status --recursive | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      SMARTNIC_IP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.smartnic_ip:
  stage: ip
  extends: .common
  tags:
    - ht-synth
  script:
    - make -s -C src refresh
    - make -s -C src synth COMPONENT=smartnic_250mhz.build BOARD=$SN_HW_BOARD
    - make -s -C src synth COMPONENT=smartnic.build BOARD=$SN_HW_BOARD
    - make -s -C src synth COMPONENT=smartnic_app.build BOARD=$SN_HW_BOARD
  artifacts:
    paths:
      - .out
  cache:
    - key: cache-smartnic_ip-$SN_HW_BOARD-$SMARTNIC_IP_CACHE_KEY
      paths:
        - .out
  timeout: 4h
  needs:
    - smartnic_ip_cache_key

shell_ip_cache_key:
  stage: ip
  extends: .common
  tags:
    - ht-sim
  script:
    - |
      cat <<_EOF | tee dependencies.txt
      VIVADO_VERSION=$VIVADO_VERSION
      $(git submodule status --recursive | awk '{ print $1,$2 }')
      _EOF
    - |
      cat <<_EOF | tee cache_key.env
      SHELL_IP_CACHE_KEY=$(sha1sum dependencies.txt | awk '{ print $1 }')
      _EOF
  artifacts:
    reports:
      dotenv:
        cache_key.env
  needs: []

.shell_ip:
  stage: ip
  extends: .common
  tags:
    - ht-synth
  script:
    - make -s -C src refresh
    - make -s -C src synth COMPONENT=xilinx.alveo.rtl BOARD=$SN_HW_BOARD
  artifacts:
    paths:
      - .out
  cache:
    - key: cache-shell_ip-$SN_HW_BOARD-$SHELL_IP_CACHE_KEY
      paths:
        - .out
  timeout: 4h
  needs:
    - shell_ip_cache_key

smartnic_ip_au280:
  extends: .smartnic_ip
  variables:
    SN_HW_BOARD: au280

smartnic_ip_au55c:
  extends: .smartnic_ip
  variables:
    SN_HW_BOARD: au55c

smartnic_ip_au250:
  extends: .smartnic_ip
  variables:
    SN_HW_BOARD: au250
  rules:
    - when: manual
      allow_failure: true

shell_ip_au280:
  extends: .shell_ip
  variables:
    SN_HW_BOARD: au280

shell_ip_au55c:
  extends: .shell_ip
  variables:
    SN_HW_BOARD: au55c

.bitfile:
  stage: bitfile
  extends: .common
  tags:
    - ht-synth
  script:
    - |
      cat <<_EOF >> bitfile.env
      EXAMPLES_DIR=$EXAMPLES_DIR
      SN_HW_APP_NAME=$SN_HW_APP_NAME
      SN_HW_BOARD=$SN_HW_BOARD
      _EOF
    - cat bitfile.env
    - make -s -C $EXAMPLES_DIR/$SN_HW_APP_NAME config BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
    - make -s -C src refresh
    - mkdir -p $EXAMPLES_DIR/$SN_HW_APP_NAME/.app/out/$SN_HW_BOARD/$VIVADO_VERSION
    - cp -pr .out/$SN_HW_BOARD/$VIVADO_VERSION $EXAMPLES_DIR/$SN_HW_APP_NAME/.app/out/$SN_HW_BOARD/$VIVADO_VERSION/smartnic 2>/dev/null && echo "Using pre-generated SmartNIC IP" || echo "No pre-generated SmartNIC IP available."
    - make -s -C $EXAMPLES_DIR/$SN_HW_APP_NAME build  BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
  artifacts:
    name: "artifacts.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - .out
      - $EXAMPLES_DIR/$SN_HW_APP_NAME
      - open-nic-shell/build
    when: always
    reports:
      dotenv:
        bitfile.env
    expire_in: 2 weeks
  timeout: 8h

build_p4_and_verilog:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_and_verilog
    SN_HW_BOARD: au55c
  needs:
    - ons_ip_au55c
    - smartnic_ip_au55c
  rules:
    - when: manual
      allow_failure: true

build_p2p:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p2p
    SN_HW_BOARD: au250
  needs:
    - ons_ip_au250
    - smartnic_ip_au250
  rules:
    - when: manual
      allow_failure: true

build_p4_only_u280:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_only
    SN_HW_BOARD: au280
    IMPL_STRATEGY: Performance_ExplorePostRoutePhysOpt
  needs:
    - ons_ip_au280
    - smartnic_ip_au280

build_p4_only_u55c:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_only
    SN_HW_BOARD: au55c
  needs:
    - ons_ip_au55c
    - smartnic_ip_au55c

build_p4_with_extern:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_with_extern
    SN_HW_BOARD: au250
  needs:
    - ons_ip_au250
    - smartnic_ip_au250
  rules:
    - when: manual
      allow_failure: true

build_p4_multi_proc_u280:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_multi_proc
    SN_HW_BOARD: au280
    IMPL_STRATEGY: Performance_ExplorePostRoutePhysOpt
  needs:
    - ons_ip_au280
    - smartnic_ip_au280

build_p4_multi_proc_u55c:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: p4_multi_proc
    SN_HW_BOARD: au55c
    IMPL_STRATEGY: Performance_ExplorePostRoutePhysOpt
  needs:
    - ons_ip_au55c
    - smartnic_ip_au55c

build_proxy_test_u280:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: proxy_test
    SN_HW_BOARD: au280
  needs:
    - ons_ip_au280
    - smartnic_ip_au280
  rules:
    - when: manual
      allow_failure: true

build_shell_au55c:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: shell
    SN_HW_BOARD: au55c
  needs:
    - shell_ip_au55c
  when: manual

build_shell_au280:
  extends: .bitfile
  variables:
    EXAMPLES_DIR: examples
    SN_HW_APP_NAME: shell
    SN_HW_BOARD: au280
  needs:
    - shell_ip_au280
  when: manual

build_vanilla_ons:
  stage: bitfile
  extends: .common
  tags:
    - ht-synth
  script:
    - make -f makefile.esnet vanilla_bitfile
  artifacts:
    name: "artifacts.vanilla.$CI_PROJECT_NAME.$CI_JOB_NAME.$CI_PIPELINE_ID"
    paths:
      - vanilla_artifact
    when: always
    expire_in: 2 weeks
  timeout: 8h
  needs: []
  rules:
    - when: manual
      allow_failure: true

.validate:
  stage: validate
  extends: .common
  tags:
    - ht-misc
  variables:
    VALIDATE_WNS_MIN: "-0.100"
    VALIDATE_TNS_MIN: "-100.0"
  script:
    - make -s validate BOARD=$SN_HW_BOARD BUILD_NAME=open-nic-ci
  artifacts:
    reports:
      junit:
        - open-nic-shell/build/${SN_HW_BOARD}_open-nic-ci/build_summary.xml
  timeout: 30m
  rules:
    - allow_failure: true

validate_p4_and_verilog:
  extends: .validate
  needs:
    - build_p4_and_verilog

validate_p2p:
  extends: .validate
  needs:
    - build_p2p

validate_p4_only_u280:
  extends: .validate
  needs:
    - build_p4_only_u280

validate_p4_only_u55c:
  extends: .validate
  needs:
    - build_p4_only_u55c

validate_p4_with_extern:
  extends: .validate
  needs:
    - build_p4_with_extern

validate_p4_multi_proc_u280:
  extends: .validate
  needs:
    - build_p4_multi_proc_u280

validate_p4_multi_proc_u55c:
  extends: .validate
  needs:
    - build_p4_multi_proc_u55c

validate_proxy_test_u280:
  extends: .validate
  needs:
    - build_proxy_test_u280

.hwapi:
  stage: package
  extends: .common
  tags:
    - ht-misc
  before_script: []
  script:
    - echo "$EXAMPLES_DIR $SN_HW_APP_NAME $SN_HW_BOARD"
    - unzip $EXAMPLES_DIR/$SN_HW_APP_NAME/artifacts/open-nic-ci/artifacts.$SN_HW_BOARD.open-nic-ci.0.zip
    - |
      cat <<_EOF >> hwapi.env
      SN_HW_HWAPI_JOB_NUMBER=$CI_JOB_ID
      SN_HW_APP_NAME=$SN_HW_APP_NAME
      SN_HW_BOARD=$SN_HW_BOARD
      SN_HW_COMMIT=$CI_COMMIT_SHORT_SHA
      _EOF
    - cat hwapi.env

    # Capture Robot Framework files for inclusion in containers built by downstream pipelines.
    - |
      app_suite="suites/${SN_HW_APP_NAME}"
      if [ -d "test/${app_suite}" ]; then
          tar -cjf robot-framework-test.tar.bz2 -C test library ${app_suite}
      fi
  artifacts:
    name: "artifacts.$SN_HW_BOARD.$SN_HW_APP_NAME.$CI_PIPELINE_ID"
    paths:
      - esnet-smartnic-hwapi
      - robot-framework-test.tar.bz2
    when: always
    expire_in: 3 month
    reports:
      dotenv:
        hwapi.env
  timeout: 30m

hwapi_p4_and_verilog:
  extends: .hwapi
  needs:
    - build_p4_and_verilog

hwapi_p2p:
  extends: .hwapi
  needs:
    - build_p2p

hwapi_p4_only_u280:
  extends: .hwapi
  needs:
    - build_p4_only_u280

hwapi_p4_only_u55c:
  extends: .hwapi
  needs:
    - build_p4_only_u55c

hwapi_p4_with_extern:
  extends: .hwapi
  needs:
    - build_p4_with_extern

hwapi_p4_multi_proc_u280:
  extends: .hwapi
  needs:
    - build_p4_multi_proc_u280

hwapi_p4_multi_proc_u55c:
  extends: .hwapi
  needs:
    - build_p4_multi_proc_u55c

hwapi_proxy_test_u280:
  extends: .hwapi
  needs:
    - build_proxy_test_u280

hwapi_shell_au55c:
  extends: .hwapi
  needs:
    - build_shell_au55c

hwapi_shell_au280:
  extends: .hwapi
  needs:
    - build_shell_au280

.trigger_fw:
  stage: trigger_downstream
  variables:
    SN_HW_GROUP: $CI_PROJECT_NAMESPACE
    SN_HW_REPO: $CI_PROJECT_NAME
    SN_HW_BRANCH: $CI_COMMIT_BRANCH
    SN_HW_APP_NAME: $SN_HW_APP_NAME
    SN_HW_BOARD: $SN_HW_BOARD
    # override the artifact URL in the triggered repo so it pulls directly from the hwapi job from this pipeline
    ESNET_SMARTNIC_HWAPI_URL: "$CI_PROJECT_URL/-/jobs/$SN_HW_HWAPI_JOB_NUMBER/artifacts/download?file_type=archive"
  trigger:
    project: ht/esnet-smartnic-fw
    branch: main
  rules:
    - if: '$CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH'
    - if: '$CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH'
      when: manual
      allow_failure: true

fw_p4_and_verilog:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_and_verilog
  needs:
    - hwapi_p4_and_verilog

fw_p4_only_u280:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_only_u280
  needs:
    - hwapi_p4_only_u280

fw_p4_only_u55c:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_only_u55c
  needs:
    - hwapi_p4_only_u55c

fw_p4_with_extern:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_with_extern
  needs:
    - hwapi_p4_with_extern

fw_p4_multi_proc_u280:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_multi_proc_u280
  needs:
    - hwapi_p4_multi_proc_u280

fw_p4_multi_proc_u55c:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_p4_multi_proc_u55c
  needs:
    - hwapi_p4_multi_proc_u55c

fw_proxy_test_u280:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_proxy_test_u280
  needs:
    - hwapi_proxy_test_u280

fw_shell_au55c:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_shell_au55c
  needs:
    - hwapi_shell_au55c

fw_shell_au280:
  extends: .trigger_fw
  variables:
    SN_HW_API_JOB: hwapi_shell_au280
  needs:
    - hwapi_shell_au280
