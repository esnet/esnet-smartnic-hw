//------------------------------------------------------------------------------
// VitisNet P4 component wrapper for integration with SmartNIC p4_app
//
// NOTE: This file is autogenerated. DO NOT EDIT.
//------------------------------------------------------------------------------

module {{ props.name }}_wrapper
    import {{ props.name }}_pkg::*;
    import smartnic_pkg::*;
(
    // Clock/reset
    input logic           core_clk,
    input logic           core_rstn,

    // AXI-L
    axi4l_intf.peripheral axil_if,

    // AXI
    axi4s_intf.rx         axis_rx,
    axi4s_intf.tx         axis_tx,

    // Metadata
    input  logic          user_metadata_in_valid,
    input  logic [{{ props.user_metadata_wid - 1 }}:0]   user_metadata_in,
    output logic          user_metadata_out_valid,
    output logic [{{ props.user_metadata_wid - 1 }}:0]   user_metadata_out,

    input timestamp_t      timestamp,

    // Flow control
    input logic [3:0]      egr_flow_ctl,

    // Extern ports
    {%- if props.num_user_externs > 0 and props.extern_ports %},
    output USER_EXTERN_OUT_T    user_extern_out,
    output USER_EXTERN_VALID_T  user_extern_out_valid,
    input  USER_EXTERN_IN_T     user_extern_in,
    input  USER_EXTERN_VALID_T  user_extern_in_valid
    {% endif %}
    axi4l_intf.peripheral  axil_to_extern,
    axi4s_intf.rx          axis_to_extern,
    axi4s_intf.tx          axis_from_extern
);

    {%- if props.num_user_externs > 0 and not props.extern_ports %}
    USER_EXTERN_OUT_T    user_extern_out;
    USER_EXTERN_VALID_T  user_extern_out_valid;
    USER_EXTERN_IN_T     user_extern_in;
    USER_EXTERN_VALID_T  user_extern_in_valid;

    {{ props.name }}_extern smartnic_extern_0 (
      .clk                          ( core_clk ),
      .rstn                         ( core_rstn ),
      .extern_from_vitisnetp4       ( user_extern_out ),
      .extern_from_vitisnetp4_valid ( user_extern_out_valid ),
      .extern_to_vitisnetp4         ( user_extern_in ),
      .extern_to_vitisnetp4_valid   ( user_extern_in_valid ),
      .timestamp                    ( timestamp ),
      .egr_flow_ctl                 ( egr_flow_ctl ),
      .axil_to_extern               ( axil_to_extern ),
      .axis_to_extern               ( axis_to_extern ),
      .axis_from_extern             ( axis_from_extern )
    );
    {% else %}
    axi4l_intf_peripheral_term   axil_term     ( .axi4l_if(axil_to_extern) );
    axi4s_intf_rx_sink   axis_to_extern_sink   ( .axi4s_if(axis_to_extern) );
    axi4s_intf_tx_term   axis_from_extern_term ( .aclk(core_clk), .aresetn(core_rstn), .axi4s_if(axis_from_extern) );
    {% endif %}

    // --- vitisnetp4 instance ---
    //   Generated using Xilinx VitisNet P4 from P4 file:
    //   {{ props.p4_file }}
    //
    //   Packet processing rate: {{ props.pkt_rate_mhz }} MHz

    {{ props.name }} i_{{ props.name }} (
        // Clocks & Resets
        .s_axis_aclk             (core_clk), // {{ props.axis_clk_freq_mhz }} MHz
        .s_axis_aresetn          (core_rstn),
        .s_axi_aclk              (axil_if.aclk),
        .s_axi_aresetn           (axil_if.aresetn),
        .cam_mem_aclk            (core_clk), // {{ props.cam_mem_clk_freq_mhz }} MHz
        .cam_mem_aresetn         (core_rstn),
        // Metadata
        .user_metadata_in        (user_metadata_in),         
        .user_metadata_in_valid  (user_metadata_in_valid),   
        .user_metadata_out       (user_metadata_out),
        .user_metadata_out_valid (user_metadata_out_valid),  
        {%- if props.num_user_externs > 0 %}
        // Externs
        .user_extern_in          (user_extern_in),
        .user_extern_in_valid    (user_extern_in_valid),
        .user_extern_out         (user_extern_out),
        .user_extern_out_valid   (user_extern_out_valid),
        {% endif %}
        // Slave AXI-lite interface
        .s_axi_awaddr            (axil_if.awaddr),
        .s_axi_awvalid           (axil_if.awvalid),
        .s_axi_awready           (axil_if.awready),
        .s_axi_wdata             (axil_if.wdata),
        .s_axi_wstrb             (axil_if.wstrb),
        .s_axi_wvalid            (axil_if.wvalid),
        .s_axi_wready            (axil_if.wready),
        .s_axi_bresp             (axil_if.bresp),
        .s_axi_bvalid            (axil_if.bvalid),
        .s_axi_bready            (axil_if.bready),
        .s_axi_araddr            (axil_if.araddr),
        .s_axi_arvalid           (axil_if.arvalid),
        .s_axi_arready           (axil_if.arready),
        .s_axi_rdata             (axil_if.rdata),
        .s_axi_rvalid            (axil_if.rvalid),
        .s_axi_rready            (axil_if.rready),
        .s_axi_rresp             (axil_if.rresp),
       
        // AXI-S Rx
        .s_axis_tdata            (axis_rx.tdata),
        .s_axis_tkeep            (axis_rx.tkeep),
        .s_axis_tvalid           (axis_rx.tvalid),
        .s_axis_tlast            (axis_rx.tlast),
        .s_axis_tready           (axis_rx.tready),
        
        // AXI-S Tx
        .m_axis_tdata            (axis_tx.tdata),
        .m_axis_tkeep            (axis_tx.tkeep),
        .m_axis_tvalid           (axis_tx.tvalid),
        .m_axis_tlast            (axis_tx.tlast),
        .m_axis_tready           (axis_tx.tready)
    );

    assign axis_tx.aclk = core_clk;
    assign axis_tx.aresetn = core_rstn;

endmodule : {{ props.name }}_wrapper

