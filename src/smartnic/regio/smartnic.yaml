name: smartnic
info: |
  smartnic is the top level module for the 322+ MHz
  packet processing platform.

regs:
  - default:
      width  : 32
      access : ro
      init   : 0

  - name: status
    init: 0xC0BEBEEF

  # ----- switch configuration registers. -----
  - name: igr_q_config_0
    access : rw
    count: 4
    fields:
        - name: base
          desc: sets the base queue id (qid) for the specified PF0 interface.
                indexed by host interface id number as follows
                   0 PF0     EGR_P4
                   1 PF0_VF0 EGR_CORE
                   2 PF0_VF1 IGR_EXTERN
                   3 PF0_VF2 IGR_MUX
                for example, igr_q_config_0[3].base=6 sets the base qid for PF0_VF2 (IGR_MUX) to 6.
          width: 12
          init: 0
        - name: num_q
          desc: sets the number of queues associated with the specified PF0 interface.
          width: 12
          init: 0

  - name: igr_q_config_1
    access : rw
    count: 4
    fields:
        - name: base
          desc: sets the base queue id (qid) for the specified PF1 interface.
                indexed by host interface id number as follows
                   0 PF1     EGR_P4
                   1 PF1_VF0 EGR_CORE
                   2 PF1_VF1 EGR_EXTERN
                   3 PF1_VF2 IGR_MUX
                for example, igr_q_config_1[0].base=3 sets the base qid for PF1 (EGR_P4) to 3.
          width: 12
          init: 0
        - name: num_q
          desc: sets the number of queues associated with the specified PF1 interface.
          width: 12
          init: 0

  - name: igr_sw_tdest
    access : rw
    count: 4
    fields:
        - name: value
          desc: sets the axi4s 'tdest' signal (igress switch output port) for the specified ingress physical port.
                indexed by physical port number as follows 0-CMAC0 1-CMAC1 2-PF0 3-PF1.
                for example, igr_sw_dest[0]=2 sends pkts from CMAC0 to the BYPASS path.
          width: 2
          init: 3
          enum:
              0 : APP
              2 : BYPASS
              3 : DROP

  - name: bypass_config
    access : rw
    fields:
        - name: switch_paths
          desc: when set (1) switches the bypass paths (p0->p1, p1->p0).  by default (0) p0->p0, p1->p1.
          width: 1
          init: 0

  - name: switch_config
    access: rw
    fields:
      - name: igr_sw_tpause
        desc: set to 1 to assert axi4s backpressure to the ingress switch (test register).
        width: 1
        init : 0
      - name: axis_to_host_0_tpause
        desc: set to 1 to assert axi4s backpressure to the host_0 egress FIFO (test register).
        width: 1
        init : 0
      - name: axis_to_host_1_tpause
        desc: set to 1 to assert axi4s backpressure to the host_1 egress FIFO (test register).
        width: 1
        init : 0
      - name: drop_pkt_loop
        desc: set to 1 to enable dropping egress packets that have axi4s tdest==tid (egress_port==ingress_port).
              enables drop logic on 'APP_0' and 'APP_BYPASS'.  drops on 'APP_1' to be implemented in future.
        width: 1
        init : 0

  - name: egr_demux_sel
    access : rw
    fields:
        - name: port0
          desc: when set (1) switches port0 egress traffic to PF0_VF2 (IGR_MUX).  default (0) steers to CMAC0.
          width: 1
          init: 0
        - name: port1
          desc: when set (1) switches port1 egress traffic to PF1_VF2 (IGR_MUX).  default (0) steers to CMAC1.
          width: 1
          init: 0

  - name: egr_fc_thresh
    desc: egress flow control threshold registers.  one per egress FIFO.
          indexed by physical port number as follows 0-CMAC0 1-CMAC1 2-PF0 3-PF1.
          flow control is asserted when FIFO fill level exceeds threshold value.
          threshold is specified in units of 64B words.  egress FIFOs can hold 1020x64B.
    access : rw
    count  : 4
    init   : 0xffff_ffff

  # ----- Timestamp configuration and monitoring registers. -----
  - name: timestamp_incr
    desc   : Timestamp increment register.  Added to timestamp counter on each 343.75MHz core_clk tick.
             32-bit value with a 4-bit integer component and a 28-bit fractional component.
             0x2_E8BA2E9 represents 2.90909091 ns.
    width  : 32
    access : rw
    init   : 0x2_E8BA2E9
     
  - name: timestamp_wr_upper
    desc   : Timestamp write data (upper word).
    access : rw

  - name: timestamp_wr_lower
    desc   : Timestamp write data (lower word).
             Full 64-bit value is loaded atomically into timestamp counter when lower word write event occurs.
    access : wr_evt

  - name: timestamp_rd_upper
    desc   : Timestamp read latch data (upper word).
    access : ro

  - name: timestamp_rd_lower
    desc   : Timestamp read latch data (lower word).
    access : ro
     
  - name: freerun_rd_upper
    desc   : Timestamp read latch data (upper word).
    access : ro

  - name: freerun_rd_lower
    desc   : Timestamp read latch data (lower word).
    access : ro

  - name: timestamp_rd_latch
    desc   : Timestamp read latch trigger.
             Full 64-bit timestamp is loaded atomically into timestamp latch when rd_latch write event occurs.
    width  : 8
    access : wr_evt
